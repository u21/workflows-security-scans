name: Security-Scans

on: 
  workflow_call:
    secrets:
      GITGUARDIAN:
        required: false
      VERACODE_API_ID:
        required: true
      VERACODE_API_KEY:
        required: true
        
jobs:
          
  bandit-scan:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout workflows-security-scans
        uses: actions/checkout@v2
        with:
          repository: u21/workflows-security-scans
          path: workflows-security-scans

      # Install and run Bandit
      - name: Install Bandit
        run: pip install bandit
      
      - name: Run Bandit
        run: bandit --exclude ./alembic/versions/,./tests/ --skip B101,B404 -c workflows-security-scans/bandit.yaml -r .

      - name: Generate Bandit report if necessary
        if: ${{ failure() }}
        run: bandit --exclude ./alembic/versions/,./tests/ --skip B101,B404 -c workflows-security-scans/bandit.yaml -r . -f json -o bandit_report.json

      # Upload bandit result
      - name: Upload scan result if vulnerable
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Bandit-Report-JSON
          path: bandit_report.json
        
  #gitguardian:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
      
      # Install and run ggshield
  #    - name: Install ggshield
  #      run: pip install ggshield
        
  #    - name: Run ggshield
  #      run: ggshield scan path . --recursive -y
      


  tfsec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Checkout workflows-security-scans
        uses: actions/checkout@v2
        with:
          repository: u21/workflows-security-scans
          path: workflows-security-scans
          
      # Run tfsec
      - name: Run tfsec
        run: workflows-security-scans/tfsec . --force-all-dirs

      # Generate report if tfsec fails
      - name: Generate report if tfsec fails
        if: ${{ failure() }}
        run: workflows-security-scans/tfsec . --force-all-dirs --format json --out tfsec_report.json

      # Upload tfsec result
      - name: Upload scan result if vulnerable
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Tfsec-Report-JSON
          path: tfsec_report.json

  veracode :
    runs-on : ubuntu-latest
    steps :

      - name : checkout
        uses : actions/checkout@v2
      
      - name : remove tests folder
        run : find . -type d -name 'tests' -exec rm -r {} +

      - name : zip repo
        run : zip -r code.zip .

      - name: Checkout workflows-security-scans
        uses: actions/checkout@v2
        with:
          repository: u21/workflows-security-scans
          path: workflows-security-scans

      - name : run veracode
        continue-on-error : true
        run : |
              FILE=veracode_baseline.json
              if [ -f "$FILE" ]; then
                  java -jar workflows-security-scans/pipeline-scan.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -jd true -jo true --file code.zip -bf veracode_baseline.json > res.txt
              else 
                java -jar workflows-security-scans/pipeline-scan.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -jd true -jo true --file code.zip > res.txt
              fi

      - name : read res.txt
        id : read
        run : |
            cat res.txt
            
            if grep -R "No issues found." res.txt; then
                echo ::set-output name=status::success
            elif grep -R "there are no results to analyze." res.txt; then
                echo ::set-output name=status::success
            elif grep -R "New flaws found: 0 as compared to baseline" res.txt; then
                echo ::set-output name=status::success
            else
                echo ::set-output name=status::failure
            fi
        shell: bash
        
      - name : export findings
        if: steps.read.outputs.status == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: Veracode_Results
          path: results.json
          
      - name : fail github workflow
        if: steps.read.outputs.status == 'failure'
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Veracode finding count is not 0')
